package main

import (
	"context"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	"github.com/swaggo/echo-swagger"
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/torreswoo/template-go-echo/handler"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {

	// Setup server
	e := echo.New()
	e.Logger.SetLevel(log.INFO)

	// Setup Middleware
	// - Swagger
	e.GET("/swagger/*", echoSwagger.WrapHandler)
	// - Logger
	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Skipper: func(ctx echo.Context) bool {
			return false
		},
	}))

	// Setup Routing
	e.GET("/", handler.Hello)
	e.GET("/healthz", handler.Health)

	// Start server
	go func() {
		if err := e.Start(":3100"); err != nil {
			e.Logger.Info("starting the server...")
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server with a timeout of 10 seconds.
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	signal.Notify(quit, syscall.SIGTERM)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}

	e.Logger.Info("start shutting down the server...")
}
